{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Core-CustomAMIFunctions Template. This creates Custom Lambda Functions related to AMIs within the Core Account.",

  "Resources" : {
    "Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "lambda.amazonaws.com" ]},
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        "Path" : "/",
        "Policies" : [{
          "PolicyName" : "DescribeImagesPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [{
              "Effect" : "Allow",
              "Action" : [
                "ec2:DescribeImages"
              ],
              "Resource" : "*"
            }]
          }
        },
        {
          "PolicyName" : "PutLambdaLogEventsPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [{
              "Effect" : "Allow",
              "Action" : [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource" : "arn:aws:logs:*:*:*"
            }]
          }
        }]
      }
    },

    "GetCISAmazonLinuxImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetCISAmazonLinuxImageId",
        "Description" : "A Lambda function that looks up the latest Center for Internet Security Amazon Linux AMI ID for a given OS Variant, CIS Baseline, CIS Level and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" : { "Fn::Join" : [ "\n", [
            "var osNameToFilter = {",
            "  'Amazon Linux' : 'CIS Amazon Linux'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "  var osName;",
            "  var cisBenchmark;",
            "  var cisLevel;",
            "  var amiNameFilter;",
            "",
            "  osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : 'Amazon Linux';",
            "  cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';",
            "  cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';",
            "",
            "  amiNameFilter = (osNameToFilter[osName] === undefined) ? osNameToFilter['Amazon Linux'] : osNameToFilter[osName];",
            "  amiNameFilter += ' Benchmark v' + cisBenchmark + ' - Level ' + cisLevel + '-*';",
            "  console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel + ' -> ' + amiNameFilter);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [amiNameFilter]}],",
            "    Owners: ['679593333241']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    },

    "GetCISWindowsImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetCISWindowsImageId",
        "Description" : "A Lambda function that looks up the latest Center for Internet Security Windows AMI ID for a given OS Variant, CIS Baseline, CIS Level and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var osNameToFilter = {",
            "  'Windows Server 2016'    : 'CIS Microsoft Windows Server 2016',",
            "  'Windows Server 2012 R2' : 'CIS Microsoft Windows Server 2012 R2',",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "  var osName;",
            "  var cisBenchmark;",
            "  var cisLevel;",
            "  var amiNameFilter;",
            "",
            "  osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : 'Windows Server 2016';",
            "  cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';",
            "  cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';",
            "",
            "  amiNameFilter = (osNameToFilter[osName] === undefined) ? osNameToFilter['Windows Server 2016'] : osNameToFilter[osName];",
            "  if (amiNameFilter == 'CIS Microsoft Windows Server 2016') {",
            "    amiNameFilter += ' Benchmark ' + cisBenchmark + ' Level ' + cisLevel + '-*';",
            "  } else {",
            "    amiNameFilter += ' Benchmark v' + cisBenchmark + ' Level ' + cisLevel + '-*';",
            "  }",
            "  console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel + ' -> ' + amiNameFilter);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [amiNameFilter]}],",
            "    Owners: ['679593333241']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    },

    "GetCISRHELImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetCISRHELImageId",
        "Description" : "A Lambda function that looks up the latest Center for Internet Security RHEL AMI ID for a given OS Variant, CIS Baseline, CIS Level and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var osNameToFilter = {",
            "  'RHEL 7'    : 'CIS Red Hat Enterprise Linux 7',",
            "  'RHEL 6'    : 'CIS Red Hat Enterprise Linux 6'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "  var osName;",
            "  var cisBenchmark;",
            "  var cisLevel;",
            "  var amiNameFilter;",
            "",
            "  osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : 'RHEL 7';",
            "  cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';",
            "  cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';",
            "",
            "  amiNameFilter = (osNameToFilter[osName] === undefined) ? osNameToFilter['RHEL 7'] : osNameToFilter[osName];",
            "  amiNameFilter += ' Benchmark v' + cisBenchmark + ' - Level ' + cisLevel + '-*';",
            "  console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel + ' -> ' + amiNameFilter);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [amiNameFilter]}],",
            "    Owners: ['679593333241']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return x.CreationDate < y.CreationDate; });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    },

    "GetCISCentosImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetCISCentosImageId",
        "Description" : "A Lambda function that looks up the latest Center for Internet Security Centos AMI ID for a given OS Variant, CIS Baseline, CIS Level and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var osNameToFilter = {",
            "  'Centos 7'    : 'CIS Cent?? Linux 7',",
            "  'Centos 6'    : 'CIS Cent?? Linux 6'",
            "};",
            "",
            "var cisLevelToFilter = {",
            "  '1' : 'Level 1'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "  var osName;",
            "  var cisBenchmark;",
            "  var cisLevel;",
            "  var amiNameFilter;",
            "",
            "  osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : 'Centos 7';",
            "  cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';",
            "  cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';",
            "",
            "  amiNameFilter = (osNameToFilter[osName] === undefined) ? osNameToFilter['Centos 7'] : osNameToFilter[osName];",
            "  amiNameFilter += ' Benchmark v' + cisBenchmark + ' - Level ' + cisLevel + '-*';",
            "  console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel + ' -> ' + amiNameFilter);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [amiNameFilter]}],",
            "    Owners: ['679593333241']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return x.CreationDate < y.CreationDate; });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    },

    "GetCISUbuntuImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetCISUbuntuImageId",
        "Description" : "A Lambda function that looks up the latest Center for Internet Security Ubuntu AMI ID for a given Version and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" :  { "Fn::Join" : [ "\n", [
            "var osNameToFilter = {",
            "  'Ubuntu Server 16.04 LTS' : 'CIS Ubuntu Linux 16.04 LTS',",
            "  'Ubuntu Server 14.04 LTS' : 'CIS Ubuntu Linux 14.04 LTS'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "  var cisBenchmark;",
            "  var cisLevel;",
            "  var amiNameFilter;",
            "",
            "  osName = (event.ResourceProperties.OSName) ? event.ResourceProperties.OSName : 'Ubuntu Server 16.04 LTS';",
            "  cisBenchmark = (event.ResourceProperties.CISBenchmark) ? event.ResourceProperties.CISBenchmark : '?.?.*';",
            "  cisLevel = (event.ResourceProperties.CISLevel) ? event.ResourceProperties.CISLevel : '1';",
            "",
            "  amiNameFilter = (osNameToFilter[osName] === undefined) ? osNameToFilter['Ubuntu Server 16.04 LTS'] : osNameToFilter[osName];",
            "  amiNameFilter += ' Benchmark v' + cisBenchmark + ' - Level ' + cisLevel + '-*';",
            "  console.log('OS: ' + osName + ', Benchmark: ' + cisBenchmark + ', Level: ' + cisLevel + ' -> ' + amiNameFilter);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [amiNameFilter]}],",
            "    Owners: ['679593333241']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    },

    "GetOpenVPNASImageIdFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "FunctionName" : "GetOpenVPNASImageId",
        "Description" : "A Lambda function that looks up the latest OpenVPN Access Server AMI ID for a given License, Version and Region.",
        "Role" : { "Fn::GetAtt" : [ "Role", "Arn" ]},
        "Runtime" : "nodejs4.3",
        "Timeout" : "30",
        "Handler" : "index.handler",
        "Code" : {
          "ZipFile" : { "Fn::Join" : [ "\n", [
            "var licenseToUUID = {",
            "  'OpenVPNAS2'  : 'fe8020db-5343-4c43-9e65-5ed4a825c931',",
            "  'OpenVPNAS10' : '8fbe3379-63b6-43e8-87bd-0e93fd7be8f3',",
            "  'OpenVPNAS25' : '23223b90-d61f-472a-b732-f2b98e6fa3fb',",
            "  'OpenVPNAS50' : 'bbff26cd-b407-44a2-a7ef-70b8971391f1'",
            "};",
            "",
            "var response = require('cfn-response');",
            "",
            "exports.handler = function(event, context) {",
            "  console.log('Request body:\\n' + JSON.stringify(event));",
            "",
            "  if (event.RequestType == 'Delete') {",
            "    response.send(event, context, response.SUCCESS);",
            "    return;",
            "  }",
            "",
            "  var responseStatus = response.FAILED;",
            "  var responseData = {};",
            "  var license;",
            "  var version;",
            "  var amiNameFilter;",
            "",
            "  license = (event.ResourceProperties.License) ? event.ResourceProperties.License : 'OpenVPNAS2';",
            "  version = (event.ResourceProperties.Version) ? event.ResourceProperties.Version : '?.?.*';",
            "",
            "  amiNameFilter = 'OpenVPN Access Server ' + version + '-';",
            "  amiNameFilter += (licenseToUUID[license] === undefined) ? licenseToUUID['OpenVPNAS2'] : licenseToUUID[license];",
            "  amiNameFilter += '-*';",
            "  console.log('License: ' + license + ', version: ' + version + ' -> ' + amiNameFilter);",
            "",
            "  var aws = require('aws-sdk');",
            "",
            "  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});",
            "  var describeImagesParams = {",
            "    Filters: [{ Name: 'name', Values: [amiNameFilter]}],",
            "    Owners: ['679593333241']",
            "  };",
            "",
            "  console.log('Calling DescribeImages...');",
            "  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {",
            "    if (err) {",
            "      responseData = {Error: 'DescribeImages call failed'};",
            "      console.error(responseData.Error + ':\\n', err);",
            "    }",
            "    else {",
            "      var images = describeImagesResult.Images;",
            "      console.log('DescribeImages returned ' + images.length + ' images');",
            "      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });",
            "      for (var i = 0; i < images.length; i++) {",
            "        responseStatus = response.SUCCESS;",
            "        responseData['ImageId'] = images[i].ImageId;",
            "        responseData['Name'] = images[i].Name;",
            "        console.log('Found: ' + images[i].Name + ', ' + images[i].ImageId);",
            "        break;",
            "      }",
            "    }",
            "",
            "    response.send(event, context, responseStatus, responseData);",
            "  });",
            "};"
          ]]}
        }
      }
    }
  },

  "Outputs" : {
    "GetCISAmazonLinuxImageIdFunctionArn" : {
      "Description" : "The GetCISAmazonLinuxImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetCISAmazonLinuxImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetCISAmazonLinuxImageIdFunctionArn" }}
    },

    "GetCISWindowsImageIdFunctionArn" : {
      "Description" : "The GetCISWindowsImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetCISWindowsImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetCISWindowsImageIdFunctionArn" }}
    },

    "GetCISRHELImageIdFunctionArn" : {
      "Description" : "The GetCISRHELImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetCISRHELImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetCISRHELImageIdFunctionArn" }}
    },

    "GetCISCentosImageIdFunctionArn" : {
      "Description" : "The GetCISCentosImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetCISCentosImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetCISCentosImageIdFunctionArn" }}
    },

    "GetCISUbuntuImageIdFunctionArn" : {
      "Description" : "The GetCISUbuntuImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetCISUbuntuImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetCISUbuntuImageIdFunctionArn" }}
    },

    "GetOpenVPNASImageIdFunctionArn" : {
      "Description" : "The GetOpenVPNASImageId Lambda Function ARN",
      "Value" :  { "Fn::GetAtt" : [ "GetOpenVPNASImageIdFunction", "Arn" ]},
      "Export" : { "Name" : { "Fn::Sub" : "${AWS::StackName}-GetOpenVPNASImageIdFunctionArn" }}
    }
  }
}
